# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems


class V1EnvVarSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Swagger model

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'field_ref': 'V1ObjectFieldSelector',
            'config_map_key_ref': 'V1ConfigMapKeySelector',
            'secret_key_ref': 'V1SecretKeySelector'
        }

        self.attribute_map = {
            'field_ref': 'fieldRef',
            'config_map_key_ref': 'configMapKeyRef',
            'secret_key_ref': 'secretKeyRef'
        }

        self._field_ref = None
        self._config_map_key_ref = None
        self._secret_key_ref = None

    @property
    def field_ref(self):
        """
        Gets the field_ref of this V1EnvVarSource.
        Selects a field of the pod; only name and namespace are supported.

        :return: The field_ref of this V1EnvVarSource.
        :rtype: V1ObjectFieldSelector
        """
        return self._field_ref

    @field_ref.setter
    def field_ref(self, field_ref):
        """
        Sets the field_ref of this V1EnvVarSource.
        Selects a field of the pod; only name and namespace are supported.

        :param field_ref: The field_ref of this V1EnvVarSource.
        :type: V1ObjectFieldSelector
        """
        self._field_ref = field_ref

    @property
    def config_map_key_ref(self):
        """
        Gets the config_map_key_ref of this V1EnvVarSource.
        Selects a key of a ConfigMap.

        :return: The config_map_key_ref of this V1EnvVarSource.
        :rtype: V1ConfigMapKeySelector
        """
        return self._config_map_key_ref

    @config_map_key_ref.setter
    def config_map_key_ref(self, config_map_key_ref):
        """
        Sets the config_map_key_ref of this V1EnvVarSource.
        Selects a key of a ConfigMap.

        :param config_map_key_ref: The config_map_key_ref of this V1EnvVarSource.
        :type: V1ConfigMapKeySelector
        """
        self._config_map_key_ref = config_map_key_ref

    @property
    def secret_key_ref(self):
        """
        Gets the secret_key_ref of this V1EnvVarSource.
        Selects a key of a secret in the pod's namespace

        :return: The secret_key_ref of this V1EnvVarSource.
        :rtype: V1SecretKeySelector
        """
        return self._secret_key_ref

    @secret_key_ref.setter
    def secret_key_ref(self, secret_key_ref):
        """
        Sets the secret_key_ref of this V1EnvVarSource.
        Selects a key of a secret in the pod's namespace

        :param secret_key_ref: The secret_key_ref of this V1EnvVarSource.
        :type: V1SecretKeySelector
        """
        self._secret_key_ref = secret_key_ref

    def to_dict(self):
        """
        Return model properties dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Return model properties str
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
